////////////////////////////////// Collections ////////////////////////////////////////////
// collections in nlo will start with 1, not 0. we use the index instead of an offset

// fixed collection, compile time allocated
    int32[] integers = 1, 2, 3. //array of characters
        PrintLine("{}", integers[1]).           //outputs: 1
        PrintLine("{}", integers[1, 3]).        //outputs: 13
        PrintLine("{}, {}", integers[1], integers[3]).  //outputs: 1, 3
        PrintLine("{}", integers[1-3]).   //outputs: 123
        PrintLine("{}", integers).    //outputs: 123 //outputs full array
    //can also define array size beforehand
        int32[5] integers.

// dynamic collection, runtime or compile time allocated
    char<> chars = 's', 'o', 'm', 'e', ' ', 't', 'e', 'x', 't'. //a growable list of characters
    //or
    char<> chars = "some text".
        PrintLine("{}", chars<1>).               //outputs: s
        PrintLine("{}", chars<1, 3>).            //outputs: sm
        PrintLine("{}, {}", chars<1>, chars<3>).      //outputs: s, m
        PrintLine("{}", chars<1-6>).       //outputs: some r
        PrintLine("{}", chars).    //outputs: some random text
    //list functions:
        Collection::Append(chars, ", extra text").    //outputs: some text, extra text
        Collection::AppendAfterIndex(chars, ", extra text", 3).   //outputs: som, extra texte text
        Collection::Prepend(chars, ", extra text").     //outputs: ,extra textsome text

//TODO: determine whether lists should be implemented as linked lists, or "array lists"
//Linked list: each element will hold a value, and a reference to the following values memory location
//array list: when an array is made to exceed its current length, the current memory allocation is dropped,
//and a new location in memory is allocated that can hold the new larger version of the array

// String
    string someString = "some random text".
    PrintLine("{}", someString)



    string<> months = "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec".


//
    char<><3> collectionOfCharCollections = <
        <"january">,
        <"fubruary">,
        <"march">
    >.
    //or
    char<><3> collectionOfCharCollections = <"january">, <"february">, <"march">.

//
    char[]<> dynamicCollectionOfFixedCharCollections = ["january"], ["february"], ["march"].
///////////////////////////////////////////////////////////////////////////////////////////









mutable int32[] someInt32Array = 1, 2, 3.
someIntArray[] = 4, 5, 6.
someIntArray[0] = 10.
mutable char<> someCharList = "something".
someCharList = "pimp".
someCharList<0> = 's'.










//function parameters cannot be mutated
    function ChangeValue(mutable int32 input) returns int32{
        input = input + 1.  //not allowed
        return input.
    }
    //create new variable instead
    function ChangeValue(int32 input) returns int32{
        int32 changedInput = input + 1.
        return changedInput.
        //or
        return input + 1.   //this effectively imitates creating a new variable and returning it
    }

//is it possible to have function param names optional?
    function SomeFunction(int32 input1, int32 input2){}
    SomeFunction(input1 = 5, input2 = 10).
    //or
    SomeFunction(5, 10).
    //or
    SomeFunction(5, input2 = 10).







    

//semantic highlighting should be different for module components
use SomeModule/*blue/green*/::SomeSubModule/*blue/green*/::SomeFunction/*yellow*/.
use SomeModule/*blue/green*/::SomeSubModule/*blue/green*/::SomeStructOrEnum/*dark blue*/.