//tuple
int a.
(a, float b) = SomeFunction().

SomeFunction() returns (int, float){
    int c = 100.
    return (c, 25.3).
}


///////////////////////////////////////////////////////////////////////////////////////


//struct tuple/named tuple              //is this better?
struct Color(uint, uint, uint)          struct Color{uint, uint, uint}
struct Point(float, float, float)       struct Point{float, float, float}

Color color = Color(255, 0, 0).         Color color = Color{255, 0, 0}.
Point origin = Point(0.0, 0.0, 0.0).    Point origin = Point{0.0, 0.0, 0.0}.


///////////////////////////////////////////////////////////////////////////////////////


//multidimensional collections
        char|3||12| months = |  //a length 12 collection of length 3 collections
            |'j', 'a', 'n'|,
            |"feb"|,
            |"mar"|,
            |"apr"|,
            |"may"|,
            |"jun"|,
            |"jul"|,
            |"aug"|,
            |"sep"|,
            |"oct"|,
            |"nov"|,
            |"dec"|
        |.

        //
        char[][] months = [
            ["january"],
            ["february"],
            ["march"],
            ["april"],
            ["may"],
            ["june"],
            ["july"],
            ["august"],
            ["september"],
            ["october"],
            ["november"],
            ["december"]
        ].
        //unlike a set, an array can contain other arrays of unequal size, because it just points to heap memory
        //could also use a set of arrays, for this example. char[]|| months. so months would be a set of wide pointers
        //stored on the stack, that point to heap

        //multidimensional collection access
        months[1][1] //outputs j
        months[1-3][1] //outputs jan
        months[1][1-3] //outputs jfm


        //apparently there is something called alignment that this may not work with


////////////////////////////////////////////////////////////////////////////////////////////


//dynamic type
    //type determined at run time. vs compile time generics
    dynamic value = SomeFunction().


/////////////////////////////////////////////////////////////////////////////////////////////


//using multiple logic/types from a module
use SomeModule::SomeSubModule::SomeFunction, SomeEnum, SomeStruct, SomeConstant.
//vs
use SomeModule::SomeSubModule::SomeFunction.
use SomeModule::SomeSubModule::SomeEnum.
use SomeModule::SomeSubModule::SomeStruct.
use SomeModule::SomeSubModule::SomeConstant.


//////////////////////////////////////////////////////////////////////////////////////////////


//module use scope
    //any function in the module can use the external module
    module SomeModule{
        use SomeOtherModule::SomeFunction.

        function AFunction(){
            SomeFunction().
        }
    }

    //vs

    //only this function can use the external module
    module SomeModule{
        function AFunction(){
            use SomeOtherModule::SomeFunction.

            SomeFunction().
        }
    }