Begin by building lexical analyzer for the most basic of programs.
    stack allocated type delarations
    line and block comments
    statement terminator = "." followed by whitespace
    identifiers
    mathematical operators

    example program:
        //add 2 and 2       //Comment discarded. no token output
        int32 a = 2 + 2.    //lexer tokens: Int32, Identifier, Assignment, IntegerLiteral, Plus, IntegerLiteral, StatementTerminator

    Possible lexer design:
        function Lexer(char[] input) returns TokenStream{ //not sure what kind of data structure to output for use by parser
            //instantiate incrementer
            mut int32 i = 0.

            while i < input:Length{
                char currentCharacter = input[i].
                String possibleToken.

                //add current character to string for comparison
                possibleToken:Add(currentCharacter).

                //compare string to available syntax tokens
                if possibleToken == "SomeToken"{
                    //add corresponding token to stream
                    TokenStream:Add(SomeToken).
                    //clear string, for further lexing
                    possibleToken:Clear().
                }
                else{
                    //rerun loop
                }

                //increment i to get next character in input
                i = i + 1.
            }
        }

------------------------------------------------------------------------------------------------------------------------------

Token               Example

LineComment         //
BlockComment        /**/
Period              .
Whitespace          space or enter/others
Identifier          nameOfVariable/Function/Test
OpenParenthesis     (
CloseParenthesis    )
OpenCurlyBrace      {
CloseCurlyBrace     }
OpenSquareBracket   [
CloseSquareBracket  ]
Colon               :
Plus                +
Minus               -
Muliply             *
Divide              /
Equivalence         == or is
Assignment          =
UseKeyword          use
PublicKeyword       public
ReturnsKeyword      returns
ReturnKeyword       return
RefKeyword          ref
DerefKeyword        deref
CopyKeyword         copy
TestKeyword         test
AssertKeyword       assert


if / detected, check for following character
    if following character is Whitespace
        output Divide token
    else if following character is /
        ignore all characters until end of line
    else if following character is *
        ignore all characters until */
    else
        likely an error