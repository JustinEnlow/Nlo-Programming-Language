//////////////////////////////// Base level program ///////////////////////////////////////
    //modules and functions not necessary. filename will always be Main.nlo. not used in libraries
    /*Main.nlo is the only .nlo file that does not require a module with the project and file name*/
    use CommandLineInterface::PrintLine.

    PrintLine("Fuck off, world!").


///////////////////////////////////// Example Program ///////////////////////////////////////
    use CommandLineInterface::PrintLine.
    use CommandLineInterface::ReadLine.
    use RandomNumberGenerator::GenerateRandom.

    PrintLine("Guess the number!").
    int32 secretNumber = GenerateRandom(1, 100).
    mutable int32 guess = -1.

    while(true){
        PrintLine("Please enter a whole number between 1 and 100").
            
        char<> userInput = ReadLine().
            
        if TypeOf(TryParse(userInput)) == TypeOf(guess) { //verify data types.  //if GetTypeOf(userInput) is GetTypeOf(guess)
            guess = TryParse(userInput).
        }
        else{
            PrintLine("Guess not valid.").
            restart. // continue in c# // may not use restart. maybe retry/something else
        }

        
        if guess > secretNumber{
            PrintLine("Too big.").
            restart.
        }
        else if guess < secretNumber{
            PrintLine("Too small.").
            restart.
        }
        else{
            PrintLine("You win!").
            exit. // may not use break. maybe exitScope/endScope/finish/end/something else
        }
        /*
        if an else{} is not included, compiler should show an error for unhandled conditions
        */
    }


///////////////////////////////////// Example Module ////////////////////////////////////////
    public module PIDController{
        public struct PIDGain{
            generic p, 
            generic i, 
            generic d
        }
        public struct PIDOutput{
            generic output,
            generic error,
            generic integral
        }
        public function Calculate(
            generic setPoint, generic measuredValue, generic previousError, generic previousIntegral, ref PIDGain gain, generic deltaTime
        ) returns PIDOutput{
            generic error = setPoint - measuredValue.
            generic integral = (previousIntegral + error) * deltaTime.
            generic derivative = (error - previousError) / deltaTime.

            return PIDOutput{
                output = (error * deref gain:p) + (integral * deref gain:i) + (derivative * deref gain:d),
                error = error,
                integral = integral
            }
        }
    }

    module SomeModule{
        use PIDController::PIDGain.
        use PIDController::PIDOutput.

        function DoSomethingWithPID(){
            PIDGain gain = PIDGain{p = 100.0, i = 0.0, d = 0.0}.

            PIDOutput output = Calculate(setPoint = 50.0, measuredValue = 0.0, previousError = 0.0, 
                previousIntegral = 0.0, gain = ref gain, deltaTime = 0.02).
        }
    }